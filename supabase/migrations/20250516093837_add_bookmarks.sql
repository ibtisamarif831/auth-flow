create table "public"."bookmarks_bibile" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid default gen_random_uuid(),
    "book_number" integer,
    "chapter_number" integer
);


alter table "public"."bookmarks_bibile" enable row level security;

CREATE UNIQUE INDEX bookmarks_bibile_pkey ON public.bookmarks_bibile USING btree (id);


alter table "public"."bookmarks_bibile" add constraint "bookmarks_bibile_pkey" PRIMARY KEY using index "bookmarks_bibile_pkey";

alter table "public"."bookmarks_bibile" add constraint "bookmarks_bibile_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."bookmarks_bibile" validate constraint "bookmarks_bibile_user_id_fkey";


grant delete on table "public"."bookmarks_bibile" to "anon";

grant insert on table "public"."bookmarks_bibile" to "anon";

grant references on table "public"."bookmarks_bibile" to "anon";

grant select on table "public"."bookmarks_bibile" to "anon";

grant trigger on table "public"."bookmarks_bibile" to "anon";

grant truncate on table "public"."bookmarks_bibile" to "anon";

grant update on table "public"."bookmarks_bibile" to "anon";

grant delete on table "public"."bookmarks_bibile" to "authenticated";

grant insert on table "public"."bookmarks_bibile" to "authenticated";

grant references on table "public"."bookmarks_bibile" to "authenticated";

grant select on table "public"."bookmarks_bibile" to "authenticated";

grant trigger on table "public"."bookmarks_bibile" to "authenticated";

grant truncate on table "public"."bookmarks_bibile" to "authenticated";

grant update on table "public"."bookmarks_bibile" to "authenticated";

grant delete on table "public"."bookmarks_bibile" to "service_role";

grant insert on table "public"."bookmarks_bibile" to "service_role";

grant references on table "public"."bookmarks_bibile" to "service_role";

grant select on table "public"."bookmarks_bibile" to "service_role";

grant trigger on table "public"."bookmarks_bibile" to "service_role";

grant truncate on table "public"."bookmarks_bibile" to "service_role";

grant update on table "public"."bookmarks_bibile" to "service_role";

create policy "Enable users to view their own data only"
on "public"."bookmarks_bibile"
as permissive
for all
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id))
with check ((( SELECT auth.uid() AS uid) = user_id));



